JASM Light 16 4 Instruction set
Last updated 08/20/21



hx dec
00 000 NOP  ---   No operation.
01 001 MCA  ---   Moves register C to register A.
02 002 MCB  ---   Moves register C to register B.
03 003 MCBA ---   Moves register C to register A and register A to register B (A -> B is before C -> A)
04 004 MCAB ---   Moves register C to register B and register B to register A (B -> A is before C -> B)
05 005 ADD  ---   Sets register C to register A + register B + the carry flag.                                      add carry: true  set carry: false
06 006 ADC  ---   Sets register C to register A + register B + the carry flag and sets the carry flag accordingly.  add carry: true  set carry: true
07 007 ADI  ---   Sets register C to register A + register B and ignores the carry flag.                            add carry: flase set carry: false
08 008 ADCI ---   Sets register C to register A + register B and ignores but sets the carry flag accordingly.       add carry: false set carry: true
09 009 SUB  ---   Sets register C to register A - register B + the carry flag.                                      add carry: true  set carry: false
0A 010 SBC  ---   Sets register C to register A - register B + the carry flag and sets the carry flag accordingly.  add carry: true  set carry: true
NOTE: All subtract operations ignore the carry flag since it is already being used.
0B 011 SLA  ---   Sets register C to register A shifted left by 1 + the carry flag.                                                           add carry: true  set carry: false
0C 012 SLC  ---   Sets register C to register A shifted left by 1 + the carry flag and sets the carry flag accordingly.                       add carry: true  set carry: true
0D 013 SLI  ---   Sets register C to register A shifted left by 1 and ignores the carry flag.                                                 add carry: false set carry: false
0E 014 SLCI ---   Sets register C to register A shifted left by 1 and ignores but sets the cary flag accordingly.                             add carry: false set carry: true
0F 015 SRA  ---   Sets register C to register A shifted right by 1 + the carry flag (added to far left).                                      add carry: true  set carry: false
10 016 SRC  ---   Sets register C to register A shifted right by 1 + the carry flag (added to far left) and sets the carry flag accordingly.  add carry: true  set carry: true
11 017 SRI  ---   Sets register C to register A shifted right by 1 and ignores the carry flag.                                                add carry: false set carry: false
12 018 SRCI ---   Sets register C to register A shifted right by 1 and ignores but sets the carry flag accordingly.                           add carry: false set carry: true
13 019 INA  ---   Sets register C to register A incremented by 1.
14 020 DCA  ---   Sets register C to register A decremented by 1.
15 021 RLA  ---   Sets register C to register A rotated left by 1.
16 022 RLC  ---   Sets register C to register A rotated left by 1 and sets the carry flag accordingly.
17 023 RRA  ---   Sets register C to register A rotated right by 1.
18 024 RRC  ---   Sets register C to register A rotated right by 1 and sets the carry flag accordingly.
19 025 AND  ---   Stes register C to register A bitwise and register B.
10 026 ORR  ---   Sets register C to register A bitwise or register B.
1A 027 NOT  ---   Sets register C to bitwise not register A.
1B 028 XOR  ---   Sets register C to register A bitwise xor register B.
1C 029 SCA  ---   Sets the carry flag.
1D 030 RCA  ---   Resets the carry flag.
1E 031 STP  ---   Stops execution.

80 128 STA  num   Sets register A to "num".
81 129 STB  num   Sets register B to "num".
82 130 RDA  add   Reads from memory "add" to register A.
83 131 RDB  add   Reads from memory "add" to register B.
84 132 WTA  add   Writes register A to memory "add".
85 133 WTB  add   Writes register B to memory "add".
86 134 WTC  add   Writes register C to memory "add".
C0 192 JMP  add   Jumps to "add". (this is 0b11000000, which is a conditional jump that always happens)
0b11------ JMPC add   Jumps to "add" if condition is met. (see below)



Conditional jumps data:

All bits:
1 Required
1 Required
- Unused
- Invert condition (0: no, 1: yes)
- Condition type bit 3
- Condition type bit 2
- Condition type bit 1
- Condition type bit 0

Lowest 4 bits (defines condition):
0: Always
1: Jump if A == B
2: Jump if A > B
3: Jump if A < B
4: Jump if A == 0
5: Jump if B == 0
6: Jump if C == 0
7: Jump if carry flag set