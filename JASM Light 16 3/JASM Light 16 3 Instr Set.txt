JASM Light 16 3

Started: 05/15/19
Last worked on: 09/04/20


This is like JASM Light Extended, but with 16 bits. Instead of having a single 8 bit data register to hold the
instruction data, there are 2x8 bit data registers. This means the computer, while stll being 8-bit, can still access
64 kilobytes of memory / storage



Instructions:

hx dec
00 000 NOP  ---   No operation.
01 001 MCA  ---   Moves register C to register A.
02 002 MCB  ---   Moves register C to register B.
03 003 MAD  ---   Moves register A to data register 2.
04 004 MBD  ---   Moves register B to data register 2.
05 005 MCD  ---   Moves register C to data register 2.
06 006 MDA  ---   Moves data register 2 to register A.
07 007 MDB  ---   Moves data register 2 to register B.
08 008 MCBA ---   Moves register C to register A and register A to register B (A -> B is before C -> A)
09 009 MCAB ---   Moves register C to register B and register B to register A (B -> A is before C -> B)
0A 010 ADD  ---   Sets register C to register A + register B.
0B 011 SUB  ---   Sets register C to register A - register B.
0C 012 ADC  ---   Sets register C to register A + register B, and sets the carry flag accordingly.
0D 013 SBC  ---   Sets register C to register A - register B, and sets the carry flag accordingly.
0E 014 INA  ---   Sets register C to register A incremented by 1.
0F 015 DCA  ---   Sets register C to register A decremented by 1.
10 016 SLA  ---   Sets register C to register A shifted left by 1.
11 017 SRA  ---   Sets register C to register A shifted right by 1.
12 018 SLC  ---   Sets register C to register A shifted left by 1, and sets the carry flag accordingly.
13 019 SRC  ---   Sets register C to register A shifted right by 1, and sets the carry flag accordingly.
14 020 RLA  ---   Sets register C to register A rotated left by 1. This will also set the carry flag accordingly.
15 021 RRA  ---   Sets register C to register A rotated right by 1. This will also set the carry flag accordingly.
16 022 AND  ---   Stes register C to register A bitwise and register B.
17 023 ORR  ---   Sets register C to register A bitwise or register B.
18 024 NOT  ---   Sets register C to bitwise not register A.
19 025 XOR  ---   Sets register C to register A bitwise xor register B.
1A 026 SCA  ---   Sets the carry flag.
1B 027 RCA  ---   Resets the carry flag.
1C 028 STP  ---   Stops execution.

80 128 STA  num   Sets register A to "num".
81 129 STB  num   Sets register B to "num".
82 130 STD  num   Sets data register 2 to "num
83 131 RDA  add   Reads from memory "add" to register A.
84 132 RDB  add   Reads from memory "add" to register B.
85 133 RDD  add   Reads from memory "add" to data register 2.
86 134 RAB  add   Reads from memory "add" to register A using both data registers.
87 135 RBB  add   Reads from memory "add" to register B using both data registers.
88 136 WTA  add   Writes register A to memory "add".
89 137 WTB  add   Writes register B to memory "add".
8A 138 WTC  add   Writes register C to memory "add".
8B 139 WTD  add   Writes data register 2 to memory "add".
8C 140 WAB  add   Writes register A to memory "add" using both data registers.
8D 141 WBB  add   Writes register B to memory "add" using both data registers.
8E 142 WCB  add   Writes register C to memory "add" using both data registers.
8F 143 CRA  add   Read from cache "add" to register A.
90 144 CRB  add   Read from cache "add" to register B.
91 145 CRD  add   Read from cache "add" to register data register 2.
92 146 CWA  add   Writes register A to cache "add".
93 147 CWB  add   Writes register B to cache "add".
94 148 CWC  add   Writes register C to cache "add".
95 149 CWD  add   Writes register data register 2 to cache "add".
A0 160 JMP  add   Jumps to "add" using both data registers. (this is 0b10100000 to that the 'use both registers bit' is set)
96 150 JMPO add   Jumps to "add" using one data register.

0b11------ JMPC add Jumps to "add" using conditions.



JUMP INSTRUCTIONS:

If the highest two bits of an opcode are set to a 1, then the opcode is a conditional jump. The 5th bit (third highest)
determins whether the jump uses one or both data registers. A 0 in the 5th bit means one register, and a 1 in the 5th
bit means both registers. The 4th bit (forth highest) inverts the condition. If it is 0, the condition is not inverted.
If it is 1, the condition is inverted. The lowest 4 bits determin the condition used.


Lowest 4 bits: (defines condition)

0: Jump if A == B
1: Jump if A > B
2: Jump if A < B
3: Jump if A == 0
4: Jump if C == 0
5: Jump if addition overflow
6: Jump if subtraction underflow
7: Jump if shift overflow (from shift left)
8: Jump if shift underflow (from shift right)
9: Jump if carry flag set


All bits:

1 Required (2 byte instr)
1 Required (conditional jump)
- Num of data registers (0: 1 reg, 1: both regs)
- Invert condition (0: no, 1: yes)
- Condition type bit 3
- Condition type bit 2
- Condition type bit 1
- Condition type bit 0





Names:

NOP:  No operation
MCA:  Move C to A (or move C A)
MCB:  Move C to B (or move C B)
MCD:  Move C to D (or move C D)
MAD:  Move A to D (or move A D)
MBD:  Move B to D (or move B D)
MDA:  Move D to A (or move D A)
MDB:  Move D to B (or move D B)
MCBA: Move C to B to A (or move C B A)
MCAB: Move C to A to B (or move C A B)
ADD:  Add
SUB:  Subtract
ADC:  Add and set carry (or add and carry or add, carry)
SBC:  Subtract and set carry (or subtract and carry or subtract, carry)
INA:  Increment A (or increment)
DCA:  Decrement A (or decrement)
SLA:  Shift left A (or shift left)
SRA:  Shift right A (or shift right)
SLC:  Shift left and carry (or shift right, carry)
SRC:  Shift right and carry (or shift right, carry)
RLA:  Rotate left A (or rotate left)
RRA:  Rotate right A (or rotate right)
AND:  And
ORR:  Or
NOT:  Not
XOR:  X-or
SCA:  Set carry
RCA:  Reset carry
STP:  Stop

STA:  Store A
STB:  Store B
STD:  Store D
RDA:  Read A
RDB:  Read B
RDD:  Read D
RAB:  Read A both
RBB:  Read B both
WTA:  Write A
WTB:  Write B
WTC:  Write C
WTD:  Write D
WAB:  Write A both
WBB:  Write B both
WCB:  Write C both
CRA:  Cache read A
CRB:  Cache read B
CRD:  Cache read D
CWA:  Cache write A
CWB:  Cache write B
CWC:  Cache write C
CWD:  Cache write D
JMP:  Jump
JMPO: Jump with one byte (or jump one, or B-jump ((single) byte jump))
JMPC: Jump conditional






The idea behind this is that all the instructions that take 1 byte have a zero as the last digit and all the
instructions that take 2 bytes have a one as the last digit.



1 byte instructions:

hx dec
00 000 NOP
01 001 MCA
02 002 MCB
03 003 MCD
04 004 MAD
05 005 MBD
06 006 MDA
07 007 MDB
08 008 MCBA
09 009 MCAB
0A 010 ADD
0B 011 SUB
0C 012 ADC
0D 013 SBC
0E 014 INA
0F 015 DCA
10 016 SLA
11 017 SRA
12 018 SLC
13 019 SRC
14 020 RLA
15 021 RRA
16 022 AND
17 023 ORR
18 024 NOT
19 025 XOR
1A 026 SCA
1B 027 RCA
1C 028 STP



2 byte instructions:

hx dec
80 128 STA
81 129 STB
82 130 STD
83 131 RDA
84 132 RDB
85 133 RDD
86 134 RAB
87 135 RBB
88 136 WTA
89 137 WTB
8A 138 WTC
8B 139 WTD
8C 140 WAB
8D 141 WBB
8E 142 WCB
8F 143 CRA
90 144 CRB
91 145 CRD
92 146 CWA
93 147 CWB
94 148 CWC
95 149 CWD
A0 160 JMP
96 150 JMPO
0b11------ JMPC