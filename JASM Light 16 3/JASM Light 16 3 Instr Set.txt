JASM Light 16 3

Started: 05/15/19
Last worked on: 08/24/20


This is like JASM Light Extended, but with 16 bits. Instead of having a single 8 bit data register to hold the
instruction data, there are 2x8 bit data registers. This means the computer, while stll being 8-bit, can still access
64 kilobytes of memory / storage



Instructions:

000 NOP ---   No operation.
001 MCA ---   Moves register C to register A.
002 MCB ---   Moves register C to register B.
003 MAD ---   Moves register A to data register 2.
004 MBD ---   Moves register B to data register 2.
005 MCD ---   Moves register C to data register 2.
006 MDA ---   Moves data register 2 to register A.
007 MDB ---   Moves data register 2 to register B.
008 ADD ---   Sets register C to register A + register B.
009 SUB ---   Sets register C to register A - register B.
010 ADC ---   Sets register C to register A + register B, and sets the carry flag accordingly.
011 SBC ---   Sets register C to register A - register B, and sets the carry flag accordingly.
012 INA ---   Sets register C to register A incremented by 1.
013 DCA ---   Sets register C to register A decremented by 1.
014 SLA ---   Sets register C to register A shifted left by 1.
015 SRA ---   Sets register C to register A shifted right by 1.
016 RLA ---   Sets register C to register A shifted left by 1, and sets the carry flag accordingly.
017 RRA ---   Sets register C to register A shifyed right by 1, and sets the carry flag accordingly.
018 AND ---   Stes register C to register A bitwise and register B.
019 ORR ---   Sets register C to register A bitwise or register B.
020 NOT ---   Sets register C to bitwise not register A.
021 XOR ---   Sets register C to register A bitwise xor register B.
022 SCA ---   Sets the carry flag.
023 RCA ---   Resets the carry flag.
024 STP ---   Stops execution.

128 STA num   Sets register A to "num".
129 STB num   Sets register B to "num".
130 STD num   Sets data register 2 to "num
131 RDA add   Reads from memory "add" to register A.
132 RDB add   Reads from memory "add" to register B.
133 RDD add   Reads from memory "add" to data register 2.
134 RAB add   Reads from memory "add" to register A using both data registers.
135 RBB add   Reads from memory "add" to register B using both data registers.
136 WTA add   Writes register A to memory "add".
137 WTB add   Writes register B to memory "add".
138 WTC add   Writes register C to memory "add".
139 WTD add   Writes data register 2 to memory "add".
140 WAB add   Writes register A to memory "add" using both data registers.
141 WBB add   Writes register B to memory "add" using both data registers.
142 WCB add   Writes register C to memory "add" using both data registers.
143 CRA add   Read from cache "add" to register A.
144 CRB add   Read from cache "add" to register B.
145 CRD add   Read from cache "add" to register data register 2.
146 CWA add   Writes register A to cache "add".
147 CWB add   Writes register B to cache "add".
148 CWC add   Writes register C to cache "add".
149 CWD add   Writes register data register 2 to cache "add".
182 JMP add   Jumps to "add".
150 JPO add   Jumps to "add" using one data register.

0b11------ JMPC add Jumps to "add" using conditions.



JUMP INSTRUCTIONS:

If the highest two bits of an opcode are set to a 1, then the opcode is a conditional jump. The 5th bit (third highest)
determins whether the jump uses one or both data registers. A 0 in the 5th bit means one register, and a 1 in the 5th
bit means both registers. The 4th bit (forth highest) inverts the condition. If it is 0, the condition is not inverted.
If it is 1, the condition is inverted. The lowest 4 bits determin the condition used.


Lowest 4 bits:

0: Jump if A == B
1: Jump if A > B
2: Jump if A < B
3: Jump if A = 0
4: Jump if C = 0
5: Jump if addition overflow
6: Jump if subtraction underflow
7: Jump if shift overflow
8: Jump if shift underflow


All bits:

0
b
1 Required
1 Required
- Num of data registers (0: 1 reg, 1: both regs)
- Inverted (0: no, 1: yes)
- Condition type bit 3
- Condition type bit 2
- Condition type bit 1
- Condition type bit 0





Names:

NOP:  No operation
MCA:  Move C to A (or move C A)
MCB:  Move C to B (or move C B)
MCD:  Move C to D (or move C D)
MAD:  Move A to D (or move A D)
MBD:  Move B to D (or move B D)
MDA:  Move D to A (or move D A)
MDB:  Move D to B (or move D B)
ADD:  Add
SUB:  Subtract
ADC:  Add and set carry (or add and carry or add carry)
SBC:  Subtract and set carry (or subtract and carry or subtract carry)
INA:  Increment A (or increment)
DCA:  Decrement A (or decrement)
SLA:  Shift left A (or shift left)
SRA:  Shift right A (or shift right)
RLA:  Rotate left A (or rotate left)
RRA:  Rotate right A (or rotate right)
AND:  And
ORR:  Or
NOT:  Not
XOR:  X-or
SCA:  Set carry
RCA:  Reset carry
STP:  Stop

STA:  Store A
STB:  Store B
STD:  Store D
RDA:  Read A
RDB:  Read B
RDD:  Read D
RAB:  Read A both
RBB:  Read B both
WTA:  Write A
WTB:  Write B
WTC:  Write C
WTD:  Write D
WAB:  Write A both
WBB:  Write B both
WCB:  Write C both
CRA:  Cache read A
CRB:  Cache read B
CRD:  Cache read D
CWA:  Cache write A
CWB:  Cache write B
CWC:  Cache write C
CWD:  Cache write D
JMP:  Jump
JPO:  Jump with one byte (or jump one, or B-jump ((single) byte jump))
JMPC: Jump conditional






The idea behind this is that all the instructions that take 1 byte have a zero as the last digit and all the
instructions that take 2 bytes have a one as the last digit.



1 byte instructions:

000 NOP
001 MCA
002 MCB
003 MCD
004 MAD
005 MBD
006 MDA
007 MDB
008 ADD
009 SUB
010 ADC
011 SBC
012 INA
013 DCA
014 SLA
015 SRA
016 RLA
017 RRA
018 AND
019 ORR
020 NOT
021 XOR
022 SCA
023 RCA
024 STP



2 byte instructions:

128 STA
129 STB
130 STD
131 RDA
132 RDB
133 RDD
134 RAB
135 RBB
136 WTA
137 WTB
138 WTC
139 WTD
140 WAB
141 WBB
142 WCB
143 CRA
144 CRB
145 CRD
146 CWA
147 CWB
148 CWC
149 CWD
182 JMP
150 JPO
